{"ast":null,"code":"var _this=this;import React,{Component,Fragment}from'react';import{RNCamera}from'react-native-camera';import styles from\"./scanStyle\";import TouchableOpacity from\"react-native-web/dist/exports/TouchableOpacity\";import Text from\"react-native-web/dist/exports/Text\";import StatusBar from\"react-native-web/dist/exports/StatusBar\";import ScrollView from\"react-native-web/dist/exports/ScrollView\";import View from\"react-native-web/dist/exports/View\";import ActivityIndicator from\"react-native-web/dist/exports/ActivityIndicator\";var Scan=function Scan(props){var camera=props.camera,cameraResult=props.cameraResult,clickAgain=props.clickAgain,takePicture=props.takePicture,activeCamera=props.activeCamera,googleVisionDetetion=props.googleVisionDetetion,loading=props.loading;var desccription='QR code (abbreviated from Quick Response Code) is the trademark for a type of matrix barcode (or two-dimensional barcode) first designed in 1994 for the automotive industry in Japan. A barcode is a machine-readable optical label that contains information about the item to which it is attached. In practice, QR codes often contain data for a locator, identifier, or tracker that points to a website or application. A QR code uses four standardized encoding modes (numeric, alphanumeric, byte/binary, and kanji) to store data efficiently; extensions may also be used.';return React.createElement(View,{style:styles.scrollViewStyle},React.createElement(Fragment,null,React.createElement(StatusBar,{barStyle:\"dark-content\"}),React.createElement(Text,{style:styles.textTitle},\"Welcome To React-Native Google Vision Tutorial !\"),!camera&&!cameraResult&&React.createElement(View,{style:styles.cardView},React.createElement(Text,{numberOfLines:8,style:styles.descText},desccription),React.createElement(TouchableOpacity,{onPress:activeCamera,style:styles.buttonTouchable},React.createElement(Text,{style:styles.buttonTextStyle},\"Click to Scan !\"))),!googleVisionDetetion&&loading&&React.createElement(View,{style:styles.SpinnerStyle},React.createElement(ActivityIndicator,{size:props.size||'large'}),React.createElement(Text,{style:{color:'white',fontSize:18,fontWeight:'bold'}},\"Wait i am fetching data....\")),googleVisionDetetion&&React.createElement(Fragment,null,React.createElement(Text,{style:styles.textTitle1},\"Result !\"),React.createElement(View,{style:googleVisionDetetion?styles.scanCardView:styles.cardView},React.createElement(ScrollView,null,googleVisionDetetion.webDetection.webEntities.map(function(data,index){return React.createElement(View,{key:index,style:{borderWidth:2,borderColor:'black',margin:10}},React.createElement(Text,null,\"entityId : \",data.entityId),React.createElement(Text,null,\"score : \",data.score),React.createElement(Text,{numberOfLines:1},\"description: \",data.description));}))),React.createElement(TouchableOpacity,{onPress:clickAgain,style:styles.buttonTouchable},React.createElement(Text,{style:styles.buttonTextStyle},\"Click to Scan again!\"))),camera&&React.createElement(View,{style:styles.container},React.createElement(RNCamera,{ref:function ref(_ref2){_this.camera=_ref2;},style:styles.preview,type:RNCamera.Constants.Type.back,flashMode:RNCamera.Constants.FlashMode.off,iosCameraPermissionOptions:{title:'Permission to use camera',message:'We need your permission to use your camera',buttonPositive:'Ok',buttonNegative:'Cancel'},androidRecordAudioPermissionOptions:{title:'Permission to use audio recording',message:'We need your permission to use your audio',buttonPositive:'Ok',buttonNegative:'Cancel'},onGoogleVisionBarcodesDetected:function onGoogleVisionBarcodesDetected(_ref){var barcodes=_ref.barcodes;console.log(barcodes);}}),React.createElement(View,{style:{flex:0,flexDirection:'row',justifyContent:'center'}},React.createElement(TouchableOpacity,{onPress:function onPress(){return takePicture(_this.camera);},style:styles.capture},React.createElement(Text,{style:{fontSize:14}},\" SNAP \"))))));};export default Scan;","map":{"version":3,"sources":["C:/Users/manwi/personal-projects/firstnative/ponents/camera/scan.js"],"names":["React","Component","Fragment","RNCamera","styles","Scan","props","camera","cameraResult","clickAgain","takePicture","activeCamera","googleVisionDetetion","loading","desccription","scrollViewStyle","textTitle","cardView","descText","buttonTouchable","buttonTextStyle","SpinnerStyle","size","color","fontSize","fontWeight","textTitle1","scanCardView","webDetection","webEntities","map","data","index","borderWidth","borderColor","margin","entityId","score","description","container","ref","preview","Constants","Type","back","FlashMode","off","title","message","buttonPositive","buttonNegative","barcodes","console","log","flex","flexDirection","justifyContent","capture"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport { RNCamera } from 'react-native-camera';\r\nimport styles from './scanStyle'\r\nimport {\r\n    TouchableOpacity,\r\n    Text,\r\n    StatusBar,\r\n    ScrollView,\r\n    View,\r\n    ActivityIndicator\r\n} from 'react-native';\r\n\r\n\r\nconst Scan = (props) => {\r\n    const { camera, cameraResult, clickAgain, takePicture, activeCamera, googleVisionDetetion, loading } = props\r\n    const desccription = 'QR code (abbreviated from Quick Response Code) is the trademark for a type of matrix barcode (or two-dimensional barcode) first designed in 1994 for the automotive industry in Japan. A barcode is a machine-readable optical label that contains information about the item to which it is attached. In practice, QR codes often contain data for a locator, identifier, or tracker that points to a website or application. A QR code uses four standardized encoding modes (numeric, alphanumeric, byte/binary, and kanji) to store data efficiently; extensions may also be used.'\r\n    return (\r\n        <View style={styles.scrollViewStyle}>\r\n            {/* View When app starts, here we will dive for camera and vision things */}\r\n            <Fragment>\r\n                <StatusBar barStyle=\"dark-content\" />\r\n                <Text style={styles.textTitle}>Welcome To React-Native Google Vision Tutorial !</Text>\r\n                {!camera && !cameraResult &&\r\n                    <View style={styles.cardView} >\r\n                        <Text numberOfLines={8} style={styles.descText}>{desccription}</Text>\r\n\r\n                        <TouchableOpacity onPress={activeCamera} style={styles.buttonTouchable}>\r\n                            <Text style={styles.buttonTextStyle}>Click to Scan !</Text>\r\n                        </TouchableOpacity>\r\n\r\n                    </View>\r\n                }\r\n                {!googleVisionDetetion && loading &&\r\n                    <View style={styles.SpinnerStyle}>\r\n                        <ActivityIndicator size={props.size || 'large'} />\r\n                        <Text style={{ color: 'white', fontSize: 18, fontWeight: 'bold' }}>Wait i am fetching data....</Text>\r\n                    </View>\r\n                }\r\n                {/* When Google Vision returns response successfully */}\r\n                {googleVisionDetetion &&\r\n                    <Fragment>\r\n                        <Text style={styles.textTitle1}>Result !</Text>\r\n\r\n                        <View style={googleVisionDetetion ? styles.scanCardView : styles.cardView} >\r\n                            <ScrollView>\r\n\r\n                                {googleVisionDetetion.webDetection.webEntities.map((data, index) => {\r\n                                    return (\r\n                                        <View key={index} style={{ borderWidth: 2, borderColor: 'black', margin: 10 }}>\r\n                                            <Text>entityId : {data.entityId}</Text>\r\n                                            <Text>score : {data.score}</Text>\r\n                                            <Text numberOfLines={1}>description: {data.description}</Text>\r\n                                        </View>\r\n\r\n                                    )\r\n                                })\r\n                                }\r\n                            </ScrollView>\r\n                        </View>\r\n\r\n                        <TouchableOpacity onPress={clickAgain} style={styles.buttonTouchable}>\r\n                            <Text style={styles.buttonTextStyle}>Click to Scan again!</Text>\r\n                        </TouchableOpacity>\r\n                    </Fragment>\r\n                }\r\n\r\n                {/* React Native camera View */}\r\n                {camera &&\r\n                    <View style={styles.container}>\r\n                        <RNCamera\r\n                            ref={ref => {\r\n                                this.camera = ref;\r\n                            }}\r\n                            style={styles.preview}\r\n                            type={RNCamera.Constants.Type.back}\r\n                            flashMode={RNCamera.Constants.FlashMode.off}\r\n                            iosCameraPermissionOptions={{\r\n                                title: 'Permission to use camera',\r\n                                message: 'We need your permission to use your camera',\r\n                                buttonPositive: 'Ok',\r\n                                buttonNegative: 'Cancel',\r\n                            }}\r\n                            androidRecordAudioPermissionOptions={{\r\n                                title: 'Permission to use audio recording',\r\n                                message: 'We need your permission to use your audio',\r\n                                buttonPositive: 'Ok',\r\n                                buttonNegative: 'Cancel',\r\n                            }}\r\n                            onGoogleVisionBarcodesDetected={({ barcodes }) => {\r\n                                console.log(barcodes);\r\n                            }}\r\n                        />\r\n                        {/* Click here for taking picture  */}\r\n                        <View style={{ flex: 0, flexDirection: 'row', justifyContent: 'center' }}>\r\n                            <TouchableOpacity onPress={() => takePicture(this.camera)} style={styles.capture}>\r\n                                <Text style={{ fontSize: 14 }}> SNAP </Text>\r\n                            </TouchableOpacity>\r\n                        </View>\r\n                    </View>\r\n                }\r\n            </Fragment>\r\n        </View>\r\n\r\n    );\r\n\r\n}\r\n\r\n\r\n\r\nexport default Scan;"]},"metadata":{},"sourceType":"module"}