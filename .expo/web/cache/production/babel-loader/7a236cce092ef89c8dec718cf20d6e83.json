{"ast":null,"code":"'use strict';var url=require('url');var querystring=require('querystring');var getCurrentScriptSource=require(\"./getCurrentScriptSource\");function createSocketUrl(resourceQuery){var urlParts;if(typeof resourceQuery==='string'&&resourceQuery!==''){urlParts=url.parse(resourceQuery.substr(1));}else{var scriptHost=getCurrentScriptSource();if(scriptHost){scriptHost=scriptHost.replace(/\\/[^\\/]+$/,'');}urlParts=url.parse(scriptHost||'/',false,true);}if(!urlParts.port||urlParts.port==='0'){urlParts.port=self.location.port;}var _urlParts=urlParts,auth=_urlParts.auth,path=_urlParts.path;var _urlParts2=urlParts,hostname=_urlParts2.hostname,protocol=_urlParts2.protocol;var isAnyHostname=(hostname==='0.0.0.0'||hostname==='::')&&self.location.hostname&&!!~self.location.protocol.indexOf('http');if(isAnyHostname){hostname=self.location.hostname;}if(hostname&&(self.location.protocol==='https:'||urlParts.hostname==='0.0.0.0')){protocol=self.location.protocol;}var sockHost=hostname;var sockPath='/sockjs-node';var sockPort=urlParts.port;var shouldParsePath=path!==null&&path!==undefined&&path!=='/';if(shouldParsePath){var parsedQuery=querystring.parse(path);sockHost=parsedQuery.sockHost||sockHost;sockPath=parsedQuery.sockPath||sockPath;sockPort=parsedQuery.sockPort||sockPort;}return url.format({protocol:protocol,auth:auth,hostname:sockHost,port:sockPort,pathname:sockPath});}module.exports=createSocketUrl;","map":{"version":3,"sources":["C:/Users/manwi/AppData/Roaming/npm/node_modules/expo-cli/node_modules/webpack-dev-server/client/utils/createSocketUrl.js"],"names":["url","require","querystring","getCurrentScriptSource","createSocketUrl","resourceQuery","urlParts","parse","substr","scriptHost","replace","port","self","location","_urlParts","auth","path","_urlParts2","hostname","protocol","isAnyHostname","indexOf","sockHost","sockPath","sockPort","shouldParsePath","undefined","parsedQuery","format","pathname","module","exports"],"mappings":"AAAA,aAGA,GAAIA,CAAAA,GAAG,CAAGC,OAAO,CAAC,KAAD,CAAjB,CAEA,GAAIC,CAAAA,WAAW,CAAGD,OAAO,CAAC,aAAD,CAAzB,CAEA,GAAIE,CAAAA,sBAAsB,CAAGF,OAAO,4BAApC,CAEA,QAASG,CAAAA,eAAT,CAAyBC,aAAzB,CAAwC,CACtC,GAAIC,CAAAA,QAAJ,CAEA,GAAI,MAAOD,CAAAA,aAAP,GAAyB,QAAzB,EAAqCA,aAAa,GAAK,EAA3D,CAA+D,CAE7DC,QAAQ,CAAGN,GAAG,CAACO,KAAJ,CAAUF,aAAa,CAACG,MAAd,CAAqB,CAArB,CAAV,CAAX,CACD,CAHD,IAGO,CAEL,GAAIC,CAAAA,UAAU,CAAGN,sBAAsB,EAAvC,CAEA,GAAIM,UAAJ,CAAgB,CAEdA,UAAU,CAAGA,UAAU,CAACC,OAAX,CAAmB,WAAnB,CAAgC,EAAhC,CAAb,CACD,CAEDJ,QAAQ,CAAGN,GAAG,CAACO,KAAJ,CAAUE,UAAU,EAAI,GAAxB,CAA6B,KAA7B,CAAoC,IAApC,CAAX,CACD,CAED,GAAI,CAACH,QAAQ,CAACK,IAAV,EAAkBL,QAAQ,CAACK,IAAT,GAAkB,GAAxC,CAA6C,CAC3CL,QAAQ,CAACK,IAAT,CAAgBC,IAAI,CAACC,QAAL,CAAcF,IAA9B,CACD,CAED,GAAIG,CAAAA,SAAS,CAAGR,QAAhB,CACIS,IAAI,CAAGD,SAAS,CAACC,IADrB,CAEIC,IAAI,CAAGF,SAAS,CAACE,IAFrB,CAGA,GAAIC,CAAAA,UAAU,CAAGX,QAAjB,CACIY,QAAQ,CAAGD,UAAU,CAACC,QAD1B,CAEIC,QAAQ,CAAGF,UAAU,CAACE,QAF1B,CAOA,GAAIC,CAAAA,aAAa,CAAG,CAACF,QAAQ,GAAK,SAAb,EAA0BA,QAAQ,GAAK,IAAxC,GAAiDN,IAAI,CAACC,QAAL,CAAcK,QAA/D,EACpB,CAAC,CAAC,CAACN,IAAI,CAACC,QAAL,CAAcM,QAAd,CAAuBE,OAAvB,CAA+B,MAA/B,CADH,CAGA,GAAID,aAAJ,CAAmB,CACjBF,QAAQ,CAAGN,IAAI,CAACC,QAAL,CAAcK,QAAzB,CACD,CAMD,GAAIA,QAAQ,GAAKN,IAAI,CAACC,QAAL,CAAcM,QAAd,GAA2B,QAA3B,EAAuCb,QAAQ,CAACY,QAAT,GAAsB,SAAlE,CAAZ,CAA0F,CACxFC,QAAQ,CAAGP,IAAI,CAACC,QAAL,CAAcM,QAAzB,CACD,CAGD,GAAIG,CAAAA,QAAQ,CAAGJ,QAAf,CACA,GAAIK,CAAAA,QAAQ,CAAG,cAAf,CACA,GAAIC,CAAAA,QAAQ,CAAGlB,QAAQ,CAACK,IAAxB,CAEA,GAAIc,CAAAA,eAAe,CAAGT,IAAI,GAAK,IAAT,EAAiBA,IAAI,GAAKU,SAA1B,EAAuCV,IAAI,GAAK,GAAtE,CAEA,GAAIS,eAAJ,CAAqB,CACnB,GAAIE,CAAAA,WAAW,CAAGzB,WAAW,CAACK,KAAZ,CAAkBS,IAAlB,CAAlB,CAIAM,QAAQ,CAAGK,WAAW,CAACL,QAAZ,EAAwBA,QAAnC,CACAC,QAAQ,CAAGI,WAAW,CAACJ,QAAZ,EAAwBA,QAAnC,CACAC,QAAQ,CAAGG,WAAW,CAACH,QAAZ,EAAwBA,QAAnC,CACD,CAED,MAAOxB,CAAAA,GAAG,CAAC4B,MAAJ,CAAW,CAChBT,QAAQ,CAAEA,QADM,CAEhBJ,IAAI,CAAEA,IAFU,CAGhBG,QAAQ,CAAEI,QAHM,CAIhBX,IAAI,CAAEa,QAJU,CAQhBK,QAAQ,CAAEN,QARM,CAAX,CAAP,CAUD,CAEDO,MAAM,CAACC,OAAP,CAAiB3B,eAAjB","sourcesContent":["'use strict';\n/* global self */\n\nvar url = require('url');\n\nvar querystring = require('querystring');\n\nvar getCurrentScriptSource = require('./getCurrentScriptSource');\n\nfunction createSocketUrl(resourceQuery) {\n  var urlParts;\n\n  if (typeof resourceQuery === 'string' && resourceQuery !== '') {\n    // If this bundle is inlined, use the resource query to get the correct url.\n    urlParts = url.parse(resourceQuery.substr(1));\n  } else {\n    // Else, get the url from the <script> this file was called with.\n    var scriptHost = getCurrentScriptSource();\n\n    if (scriptHost) {\n      // eslint-disable-next-line no-useless-escape\n      scriptHost = scriptHost.replace(/\\/[^\\/]+$/, '');\n    }\n\n    urlParts = url.parse(scriptHost || '/', false, true);\n  }\n\n  if (!urlParts.port || urlParts.port === '0') {\n    urlParts.port = self.location.port;\n  }\n\n  var _urlParts = urlParts,\n      auth = _urlParts.auth,\n      path = _urlParts.path;\n  var _urlParts2 = urlParts,\n      hostname = _urlParts2.hostname,\n      protocol = _urlParts2.protocol; // check ipv4 and ipv6 `all hostname`\n  // why do we need this check?\n  // hostname n/a for file protocol (example, when using electron, ionic)\n  // see: https://github.com/webpack/webpack-dev-server/pull/384\n\n  var isAnyHostname = (hostname === '0.0.0.0' || hostname === '::') && self.location.hostname && // eslint-disable-next-line no-bitwise\n  !!~self.location.protocol.indexOf('http');\n\n  if (isAnyHostname) {\n    hostname = self.location.hostname;\n  } // `hostname` can be empty when the script path is relative. In that case, specifying\n  // a protocol would result in an invalid URL.\n  // When https is used in the app, secure websockets are always necessary\n  // because the browser doesn't accept non-secure websockets.\n\n\n  if (hostname && (self.location.protocol === 'https:' || urlParts.hostname === '0.0.0.0')) {\n    protocol = self.location.protocol;\n  } // default values of the sock url if they are not provided\n\n\n  var sockHost = hostname;\n  var sockPath = '/sockjs-node';\n  var sockPort = urlParts.port; // eslint-disable-next-line no-undefined\n\n  var shouldParsePath = path !== null && path !== undefined && path !== '/';\n\n  if (shouldParsePath) {\n    var parsedQuery = querystring.parse(path); // all of these sock url params are optionally passed in through\n    // resourceQuery, so we need to fall back to the default if\n    // they are not provided\n\n    sockHost = parsedQuery.sockHost || sockHost;\n    sockPath = parsedQuery.sockPath || sockPath;\n    sockPort = parsedQuery.sockPort || sockPort;\n  }\n\n  return url.format({\n    protocol: protocol,\n    auth: auth,\n    hostname: sockHost,\n    port: sockPort,\n    // If sockPath is provided it'll be passed in via the resourceQuery as a\n    // query param so it has to be parsed out of the querystring in order for the\n    // client to open the socket to the correct location.\n    pathname: sockPath\n  });\n}\n\nmodule.exports = createSocketUrl;"]},"metadata":{},"sourceType":"script"}